#include "magic_validator.h"

void MagicValidator::ValidatePseudoLegalMove(const std::vector<std::string> & files)
{
    std::ifstream fin(files[0], std::ios::in);
    std::string fen;
    if (fin.is_open())
    {
        while (std::getline(fin, fen))
        {
            // fen = "";  // use to debug failed fen
            Position position(fen);
            MoveGenerator moveGenerator(position);
            std::set<short> moves;
            auto pseudoLegalMoves = moveGenerator.GeneratePseudoLegalMoves<MoveType::PSEUDO_LEGAL>();
            for (auto move : pseudoLegalMoves)
                moves.insert(move);
            
            MagicValidator magicValidator(position);
            magicValidator.GeneratePseudoLegalMoves(position);
            std::set<short> movesTarget;
            for (auto move: magicValidator.pseudo_legal_capture_moves_)
                movesTarget.insert(move);
            for (auto move: magicValidator.pseudo_legal_non_capture_moves_)
                movesTarget.insert(move);
            if (movesTarget != moves)
            {
                std::cout << "wrong: " << fen << std::endl;
                position.DisplayBoard();
                std::cout << "correct:" << std::endl;
                for (auto move: movesTarget)
                    std::cout << Move(move) << " ";
                std::cout << std::endl;
                std::cout << "generated by magic:" << std::endl;
                for (auto move: moves)
                    std::cout << Move(move) << " ";
                std::cout << std::endl;
                return;
            }
        }
        std::cout << "All generated pseudo move correct" << std::endl;
    }
    else
    {
        std::cout << "Open file failed" << std::endl;
    }
}

void MagicValidator::ValidateLegalMove(const std::vector<std::string> & files)
{
    std::ifstream fin(files[0], std::ios::in);
    std::string fen;
    if (fin.is_open())
    {
        while (std::getline(fin, fen))
        {
            // fen = "";  // use to debug failed fen
            Position position(fen);
            MoveGenerator moveGenerator(position);
            std::set<short> moves;
            auto legalMoves = moveGenerator.GenerateLegalMoves<MoveType::LEGAL>();
            for (auto move : legalMoves)
                moves.insert(move);
            
            MagicValidator magicValidator(position);
            magicValidator.GenerateLegalMoves(position);
            std::set<short> movesTarget;
            for (auto move: magicValidator.capture_moves_)
                movesTarget.insert(move);
            for (auto move: magicValidator.non_capture_moves_)
                movesTarget.insert(move);
            if (movesTarget != moves)
            {
                std::cout << "wrong: " << fen << std::endl;
                position.DisplayBoard();
                std::cout << "correct:" << std::endl;
                for (auto move: movesTarget)
                    std::cout << Move(move) << " ";
                std::cout << std::endl;
                std::cout << "generated by magic:" << std::endl;
                for (auto move: moves)
                    std::cout << Move(move) << " ";
                std::cout << std::endl;
                return;
            }
        }
        std::cout << "All generated move correct" << std::endl;
    }
    else
    {
        std::cout << "Open file failed" << std::endl;
    }
}

void MagicValidator::GeneratePseudoLegalMoves(const Position& position)
{
    Color c = position.side_to_move();
    for (Square s = SQ_A0; s < SQ_NUM; s += SQ_EAST)
    {
        if (position_.piece_from_square(s) == Piece::NO_PIECE || position.color_from_square(s) != c)
            continue;

        switch (position.piece_from_square(s))
        {
        case Piece::W_ROOK:
            RookMove<Color::RED>(s);
            break;
        case Piece::B_ROOK:
            RookMove<Color::BLACK>(s);
            break;
        case Piece::W_KNIGHT:
            KnightMove<Color::RED>(s);
            break;
        case Piece::B_KNIGHT:
            KnightMove<Color::BLACK>(s);
            break;
        case Piece::W_BISHOP:
            BishopMove<Color::RED>(s);
            break;
        case Piece::B_BISHOP:
            BishopMove<Color::BLACK>(s);
            break;
        case Piece::W_ADVISOR:
            AdvisorMove<Color::RED>(s);
            break;
        case Piece::B_ADVISOR:
            AdvisorMove<Color::BLACK>(s);
            break;
        case Piece::W_KING:
            KingMove<Color::RED>(s);
            break;
        case Piece::B_KING:
            KingMove<Color::BLACK>(s);
            break;
        case Piece::W_CANNON:
            CannonMove<Color::RED>(s);
            break;
        case Piece::B_CANNON:
            CannonMove<Color::BLACK>(s);
            break;
        case Piece::W_PAWN:
            PawnMove<Color::RED>(s);
            break;
        case Piece::B_PAWN:
            PawnMove<Color::BLACK>(s);
            break;
        default:
            break;
        }
    }
}

void MagicValidator::GenerateLegalMoves(Position position)
{
    GeneratePseudoLegalMoves(position);
    for (auto pseudoMove : pseudo_legal_capture_moves_)
    {
        if (position_.IsLegalMove(pseudoMove))
            capture_moves_.push_back(pseudoMove);
    }
    for (auto pseudoMove : pseudo_legal_non_capture_moves_)
    {
        if (position_.IsLegalMove(pseudoMove))
            non_capture_moves_.push_back(pseudoMove);
    }
}